@page "/admin/books"
@page "/admin"
@inherits OwningComponentBase<BookstoreContext>


<h3><span title="This is a collection of all the books we have.">Books</span></h3>

<table class="table table-sm table-striped table-bordered table-hover">

    <thead>
        <tr>
            <th><span title="This is ID of the book in our system.">Book ID</span></th>
            <th><span title="This is full title of the book.">Book Title</span></th>
            <th><span title="This is the main author who wrote the book.">Author</span></th>
        </tr>
    </thead>

    <tbody>
        @if (BookData?.Count() > 0)
        {
            @foreach (Books b in BookData)
            {
                <tr>
                    <td>@b.BookId</td>
                    <td>@b.Title</td>
                    <td>@b.Author</td>

                    @* Create button for Details*@
                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(b.BookId)">Details</NavLink>
                    </td>
                    @* Create button for Editing*@
                    <td>
                        <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(b.BookId)">Edit</NavLink>
                    </td>
                    @* Create button for Deleting a book*@
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(x=>RemoveBook(b))"> Delete </button>
                    </td>
                </tr>
            }
        }
         else
            {
                <tr>
                    <td colspan="5" class="text-center">No Books Here :(</td>
                </tr>
            }

    </tbody>
    

</table>

<NavLink class="btn btn-primary" href="/admin/books/create">Create</NavLink>


@code {

    public BookstoreContext repo => Service;
    public IEnumerable<Books> BookData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        BookData = await repo.Books.ToListAsync();
    }

    public string GetDetailsUrl(long id) => $"/admin/books/details/{id}";

    public string GetEditUrl(long id) => $"/admin/books/edit/{id}";

    public async Task RemoveBook (Books b)
    {
        //repo.DeleteBook(b);
        await UpdateData();
    }


}
